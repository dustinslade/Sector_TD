#ifndef PROJECTILETOWER_H
#define PROJECTILETOWER_H

#include "Tower.h"
#include "Projectile.h"
#include "Enemy.h"

#include <SFML/Audio.hpp>
#include <cmath>

#define PI 3.14159265

class ProjectileTower : public Tower{
    public:
        /*
        Pre-condition: none
        Post-condition: each Proj in the ProjClip is safely deallocated
        Parameters: none
        Return Values: none
        */
        virtual ~ProjectileTower();
        /*
        Pre-condition: the ProjClip vector exists
        Post-condition: the ProjClip vector is returned
        Parameters: none
        Return Values: the ProjClip vector
        */
        std::vector<Projectile*> GetProjectileClip() { return ProjectileClip; }
        /*
        Pre-condition: the ProjClip vector exists and a window is set
        Post-condition: each item in the BulletClip is displayed onto the window
        Parameters: the current window
        Return Values: none
        */
        void DrawProjectile(sf::RenderWindow& App);
        /*
        Pre-condition: a Proj has been generated by the Tower
        Post-condition: each Proj has its angle set, is moved to the WorldObj's position, and deallocated if it touches the obj
        Parameters: a WorldObj and the current window
        Return Values: true if the Proj touches the obj
        */
        bool DoProjectile(WorldObj obj, sf::RenderWindow& App);
        /*
        Pre-condition: the Tower has a TimeLastShot
        Post-condition: the TimeLastShot has not been altered
        Parameters: none
        Return Values: the TimeLastShot of the Proj
        */
        float GetTimeLastShot() { return TimeLastShot; }
        /*
        Pre-condition: the Tower has a Frequency
        Post-condition: the Frequency has not been altered
        Parameters: none
        Return Values: the Frequency / rate of fire
        */
        float GetFrequency() { return Frequency; }
    protected:
        /*
        Pre-condition: Valid x and y positions are passed
        Post-condition: objSprite's initial position is set
        Parameters: an x and y position
        Return Values: none
        */
        ProjectileTower(int posX, int posY, float t);
        //vector of Projectiles
        std::vector<Projectile*> ProjectileClip;
        //variable holding last shot time
        float TimeLastShot;
        //Rate of Fire - represents time between shots so lower is faster
        float Frequency;
        //Projectile's velocity
        float projVelocity;
    private:
};

#endif // PROJECTILETOWER_H
